name: Run Django Tests with Coverage

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

permissions:
  contents: read
  pull-requests: write  # Allow posting coverage comments on PRs

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          sudo apt-get update -y
          sudo apt-get install -y libzbar-dev
          pip install \
            pytest pytest-cov pylint django djangorestframework pytest-django requests \
            django-cors-headers pyzbar opencv-python numpy python-dotenv openai
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run tests with coverage
        run: |
          set -e
          pytest --cov=. --cov-report=xml --cov-report=term-missing --junitxml=pytest.xml || {
            code=$?
            if [ "$code" -eq 5 ]; then
              echo "No tests collected (pytest exit code 5). Treating as success for CI coverage requirement."
              exit 0
            else
              exit $code
            fi
          }

      - name: Parse test results and coverage
        if: github.event_name == 'pull_request'
        id: test-results
        run: |
          # Parse pytest.xml to extract test results
          TOTAL=$(grep -oP 'tests="\K[0-9]+' pytest.xml | head -1)
          SKIPPED=$(grep -oP 'skipped="\K[0-9]+' pytest.xml | head -1 || echo "0")
          FAILURES=$(grep -oP 'failures="\K[0-9]+' pytest.xml | head -1 || echo "0")
          ERRORS=$(grep -oP 'errors="\K[0-9]+' pytest.xml | head -1 || echo "0")
          PASSED=$((TOTAL - SKIPPED - FAILURES - ERRORS))
          TIME=$(grep -oP 'time="\K[0-9.]+' pytest.xml | head -1)
          
          # Parse coverage.xml to get coverage percentage
          COVERAGE=$(python3 -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(round(float(root.attrib['line-rate']) * 100, 1))")
          
          # Set outputs
          echo "total=$TOTAL" >> $GITHUB_OUTPUT
          echo "passed=$PASSED" >> $GITHUB_OUTPUT
          echo "skipped=$SKIPPED" >> $GITHUB_OUTPUT
          echo "failures=$FAILURES" >> $GITHUB_OUTPUT
          echo "errors=$ERRORS" >> $GITHUB_OUTPUT
          echo "time=$TIME" >> $GITHUB_OUTPUT
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT

      - name: Post test results comment (updates on each commit)
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: pytest-coverage
          message: |
            ## 🧪 Test Results
            
            | Tests | Passed | Skipped | Failures | Errors | Time |
            |-------|--------|---------|----------|--------|------|
            | ${{ steps.test-results.outputs.total }} | ${{ steps.test-results.outputs.passed }} ✅ | ${{ steps.test-results.outputs.skipped }} 💤 | ${{ steps.test-results.outputs.failures }} ❌ | ${{ steps.test-results.outputs.errors }} 🔥 | ${{ steps.test-results.outputs.time }}s ⏱️ |
            
            ## 📊 Coverage: ${{ steps.test-results.outputs.coverage }}%
            
            <details>
            <summary>View Details</summary>
            
            **Commit:** `${{ github.event.pull_request.head.sha }}`  
            **Run:** [View Full Report](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            </details>

      - name: Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage.xml
            pytest.xml
          if-no-files-found: ignore

"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
import dj_database_url
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-dv##fju3puju_bg4otr!stbh)0y==ql!cf=^o87+li&k&)u!1w')

# Development environment detection
# Set IS_DEVEDU=True environment variable when running in development proxies
import sys
IS_DEVEDU = os.environ.get('IS_DEVEDU', 'False') == 'True'

# SECURITY WARNING: don't run with debug turned on in production!
# Enable DEBUG in tests and development environments
# Also enable DEBUG by default for local development (can be overridden with DEBUG=False)
DEBUG = os.environ.get('DEBUG', 'True') == 'True'

# Force DEBUG=True in test mode
if 'pytest' in sys.modules or 'test' in sys.argv:
    DEBUG = True

ALLOWED_HOSTS = [
    "localhost",
    "127.0.0.1",
    "[::1]",
    "languagelearningplatform.org",     # Custom domain
    "www.languagelearningplatform.org", # Custom domain with www
    ".devedu.io",  # Allow all devedu.io subdomains
]

# Add development proxy hosts if IS_DEVEDU is set
if IS_DEVEDU:
    # Add specific host if provided
    devedu_host = os.environ.get('DEVEDU_HOST', '')
    if devedu_host:
        ALLOWED_HOSTS.append(devedu_host)
    # Also allow all hosts when in dev mode (needed for proxy forwarding)
    ALLOWED_HOSTS.append('*')

# Add Render.com host if RENDER environment variable exists
RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "home",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Serve static files in production
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                "django.template.context_processors.debug",
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Use PostgreSQL on Render, SQLite for local development
DATABASE_URL = os.environ.get('DATABASE_URL')

if DATABASE_URL:
    # Production: Use PostgreSQL from Render
    DATABASES = {
        'default': dj_database_url.config(
            default=DATABASE_URL,
            conn_max_age=600,
            conn_health_checks=True,
        )
    }
else:
    # Development: Use SQLite
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# Static files configuration
# For development proxies - use STATIC_URL_PREFIX environment variable
if IS_DEVEDU:
    proxy_prefix = os.environ.get('STATIC_URL_PREFIX', '/proxy/8000')
    STATIC_URL = f'{proxy_prefix}/static/'
    # Set FORCE_SCRIPT_NAME to make Django generate URLs with proxy prefix
    FORCE_SCRIPT_NAME = proxy_prefix
    USE_X_FORWARDED_HOST = True
else:
    # For local development and production (Render)
    STATIC_URL = '/static/'

# Directory where collectstatic will collect static files for production
STATIC_ROOT = BASE_DIR / 'staticfiles'

# WhiteNoise configuration for efficient static file serving
# Use simpler storage for tests (avoids manifest file requirement)
import sys
if 'pytest' in sys.modules or 'test' in sys.argv:
    STORAGES = {
        "default": {
            "BACKEND": "django.core.files.storage.FileSystemStorage",
        },
        "staticfiles": {
            "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
        },
    }
else:
    STORAGES = {
        "default": {
            "BACKEND": "django.core.files.storage.FileSystemStorage",
        },
        "staticfiles": {
            "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
        },
    }

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CSRF_TRUSTED_ORIGINS = [
    "https://*.devedu.io",  # Allow all DevEDU subdomains by default
]

# Add development proxy origins if IS_DEVEDU is set
if IS_DEVEDU:
    devedu_host = os.environ.get('DEVEDU_HOST', '')
    if devedu_host:
        CSRF_TRUSTED_ORIGINS.append(f'https://{devedu_host}')

# Add Render hostname to CSRF trusted origins
if RENDER_EXTERNAL_HOSTNAME:
    CSRF_TRUSTED_ORIGINS.append(f'https://{RENDER_EXTERNAL_HOSTNAME}')


# =============================================================================
# AUTHENTICATION SETTINGS
# =============================================================================

# Login/Logout redirect URLs
LOGIN_URL = 'login'  # Where to redirect if login is required
LOGIN_REDIRECT_URL = 'landing'  # Where to redirect after successful login
LOGOUT_REDIRECT_URL = 'landing'  # Where to redirect after logout

# Email backend (for development - prints emails to console)
# In production, configure a real email backend for sending actual emails
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Session settings
SESSION_COOKIE_AGE = 86400  # Session expires after 1 day (86400 seconds)
SESSION_SAVE_EVERY_REQUEST = True  # Update session on every request to extend expiry


# =============================================================================
# SECURITY SETTINGS (Production Only)
# =============================================================================

# Security settings for production
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    # Trust the X-Forwarded-Proto header from Render's proxy
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Trust proxy headers in DevEDU environment
if IS_DEVEDU:
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    X_FRAME_OPTIONS = 'SAMEORIGIN'  # Allow framing from same origin